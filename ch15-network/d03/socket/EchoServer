package com.d03.socket;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

//데이터를 보내면 서버를 끄는게 에코서버
public class EchoServer {
	private ServerSocket serversocket;
	DataInputStream dis;//입
	DataOutputStream dos;//출   력담당
	Socket socket;

	public EchoServer(){
		try {
			//객체생성시 바로 IOException이 생길경우 바로 종료
			//예외발생하면 치명적이라 프로그램 다운되는게 차라리낫다.
			//1번 작업
			serversocket = new ServerSocket(7777);
			
		} catch (IOException e) {
			// TODO: handle exception
			System.exit(0);
			//종료
			e.printStackTrace();
		}
		while(true) {
			try {
				System.out.println("연결 요청을 기다립니다.");
				/*
				 * 서버소켓은 클라이언트의 연결요청이 올 때까지
				 * 실행을 멈추고 계속 기다림
				 * 클라이언트의 연결요청이 오면 클라이언트소켓과 통신할 새로운 소켓을 생성
				 */
				socket = serversocket.accept();
				//2번 청취
				//소켓의 입력스트림을 얻는다.
				//클라이언트가 전송한 데이터를 읽음
				dis = new DataInputStream(socket.getInputStream());

				//소켓의 출력스트림을 얻는다.
				//클라이언트로 데이터를 전송
				dos = new DataOutputStream(socket.getOutputStream());

				//클라이언트가 전송한 데이터 읽기
				String msg = dis.readUTF();
				System.out.println("[클라이언트가 전송한 메세지] : " + msg);

				//클라이언트가 전송한 데이터를 재전송
				dos.writeUTF(msg);
				System.out.println(socket.getInetAddress() + "데이터 전송");

			} catch (IOException e) {
				// TODO: handle exception
				e.printStackTrace();
			}finally {
				if(dis != null) {
					try {
						dis.close();
					} catch (IOException e2) {
						// TODO: handle exception
					}
				}
				if(dos != null) {
					try {
						dos.close();
					} catch (IOException e2) {
						// TODO: handle exception
					}
				}

			}
		}

	}

	public static void main(String[] args) {
		new EchoServer();
	}
}
