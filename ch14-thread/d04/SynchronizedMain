package com.d04.synchronizedtest;

class ATM implements Runnable{
	//공유자원
	private long depositmoney = 10000;
	
	@Override
	public void run() {
		//동기화 블럭
		//           depositmoney
		synchronized (this) {//this > 동기화대상이 되는 객체
			//멀티스레드를 구현해서 사용할 때 공유자원을 변경하는 작업을 할 경우
			//공유자원의 데이터가 왜곡될 수 있기 때문에 동기화 처리를 해야 함
			//공유자원을 변경할 때는 하나의 스레드만 작업할 수 있도록 보장
			for(int i=0;i<5;i++){
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO: handle exception
					e.printStackTrace();
				}
				if(depositmoney <0) {
					break;
				}
				withDraw(1000);
			}
		}
	}//end of run
	public void withDraw(long howMuch) {
		if(depositmoney >= howMuch) {
			depositmoney -= howMuch;//차감
			System.out.println(Thread.currentThread().getName() + depositmoney);

		}else {
			System.out.println(Thread.currentThread().getName()+", 잔액이 부족합니다.");
		}
	}
}

public class SynchronizedMain {
	
	
	public static void main(String[] args) {
		ATM atm = new ATM();
		//자원을 공유시켰음
		Thread mother = new Thread(atm,"mother");
		Thread son = new Thread(atm,"son");
		mother.start();
		son.start();
		
	}

}
